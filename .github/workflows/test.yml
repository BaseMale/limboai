name: üîß Test Builds
on:
  workflow_dispatch:

  push:
    branches: [ master ]
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "**/*.png"
      - "demo/*"

  pull_request:
    branches: [ master ]
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "**/*.png"
      - "demo/*"

# Global Settings
env:
  GODOT_TREEISH: 4.1.1-stable
  SCONS_CACHE_MSVC_CONFIG: true
  SCONS_CACHE_LIMIT: 7168
  SCONSFLAGS: verbose=yes warnings=extra werror=yes
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  linux-test-builds:
    runs-on: "ubuntu-20.04"
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: üêß Editor (x86_64, debug) + Tests
            target: editor
            arch: x86_64
            production: false
            dev_build: true
            tests: true

          - name: üêß Editor (x86_64, release)
            target: editor
            arch: x86_64
            production: true
            dev_build: false
            tests: false

          - name: üêß Template (x86_64, release)
            target: template_release
            arch: x86_64
            production: true
            dev_build: false
            tests: false

          - name: üêß Template (x86_64, debug)
            target: template_debug
            arch: x86_64
            production: true
            dev_build: false
            tests: false

    env:
      BIN: godot.linuxbsd.${{matrix.target}}${{  matrix.dev_build == true && '.dev' || ''  }}.${{matrix.arch}}

    steps:
      - name: Clone Godot
        uses: actions/checkout@v3
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TREEISH }}

      - name: Clone LimboAI module
        uses: actions/checkout@v3
        with:
          path: modules/limboai

      # Inits GODOT_VERSION, LIMBOAI_VERSION and NAME_PREFIX environment variables.
      - uses: ./modules/limboai/.github/actions/init-version

      # About sed see: https://github.com/godotengine/buildroot/issues/6
      - name: Set up buildroot x86_64
        if: matrix.arch == 'x86_64'
        run: |
          wget https://download.tuxfamily.org/godotengine/toolchains/linux/x86_64-godot-linux-gnu_sdk-buildroot.tar.bz2
          tar -xjf x86_64-godot-linux-gnu_sdk-buildroot.tar.bz2
          mv x86_64-godot-linux-gnu_sdk-buildroot buildroot
          cd buildroot
          sed -i x86_64-godot-linux-gnu/sysroot/usr/lib/pkgconfig/dbus-1.pc -e "s@/lib@/lib64@g"
          ./relocate-sdk.sh
          cd ..

      - name: Set up buildroot x86_32
        if: matrix.arch == 'x86_32'
        run: |
          wget https://download.tuxfamily.org/godotengine/toolchains/linux/i686-godot-linux-gnu_sdk-buildroot.tar.bz2
          tar -xjf i686-godot-linux-gnu_sdk-buildroot.tar.bz2
          mv i686-godot-linux-gnu_sdk-buildroot buildroot
          cd buildroot
          ./relocate-sdk.sh
          cd ..

      - name: Set up scons cache
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{env.BIN}}-${{env.GODOT_TREEISH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{env.BIN}}-${{env.GODOT_TREEISH}}-${{github.ref}}-${{github.sha}}
            ${{env.BIN}}-${{env.GODOT_TREEISH}}-${{github.ref}}
            ${{env.BIN}}-${{env.GODOT_TREEISH}}
        continue-on-error: true

      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          PATH=${GITHUB_WORKSPACE}/buildroot/bin:$PATH
          scons platform=linuxbsd target=${{matrix.target}} arch=${{matrix.arch}} production=${{matrix.production}} dev_build=${{matrix.dev_build}} tests=${{matrix.tests}} ${{env.SCONSFLAGS}}
          ls -l bin/

      - name: Strip binaries
        if: matrix.dev_build == false
        run: strip ./bin/godot.*

      - name: Prepare artifact
        env:
          OUTDIR: ${{ startsWith(matrix.target, 'template') && 'out/templates' || 'out/' }}
        run: |
          chmod +x ./bin/godot.*
          mkdir -p ${{env.OUTDIR}}
          mv ./bin/godot.* ${{env.OUTDIR}}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        env:
          NAME_EDITOR: ${{env.NAME_PREFIX}}.${{matrix.target}}${{matrix.dev_build == true && '.dev' || ''}}.linux.${{matrix.arch}}${{matrix.build-mono == true && '.mono' || ''}}
          NAME_TEMPLATES: ${{env.NAME_PREFIX}}.export-templates${{  matrix.build-mono == true && '.mono' || ''  }}
        with:
          name: ${{ startsWith(matrix.target, 'template') && env.NAME_TEMPLATES || env.NAME_EDITOR  }}
          path: out/*

      - name: Unit Tests
        if: ${{ matrix.tests }}
        run: |
          echo "Disk usage before tests:" && df -h
          ls out/
          ./out/${{ env.BIN }} --version
          ./out/${{ env.BIN }} --help
          ./out/${{ env.BIN }} --headless --test --test-case="*[LimboAI]*"

  windows-dot-net:
    runs-on: "windows-latest"
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ü™ü Editor .NET (x86_64, release)
            target: editor
            arch: x86_64
            production: true
            build-mono: true

          - name: ü™ü Template .NET (x86_64, release)
            target: template_release
            arch: x86_64
            production: true
            build-mono: true

    env:
      BIN: godot.windows.${{matrix.target}}.${{matrix.arch}}${{  matrix.build-mono == true && '.mono' || ''  }}

    steps:
      - name: Clone Godot
        uses: actions/checkout@v3
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_TREEISH }}

      - name: Clone LimboAI module
        uses: actions/checkout@v3
        with:
          path: modules/limboai

      # Inits GODOT_VERSION, LIMBOAI_VERSION and NAME_PREFIX environment variables.
      - uses: ./modules/limboai/.github/actions/init-version

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Set up scons
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons==4.4.0
          python --version
          scons --version

      - name: Set up MSVC problem matcher
        uses: ammaraskar/msvc-problem-matcher@master

      - name: Set up scons cache
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{env.BIN}}-${{env.GODOT_TREEISH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{env.BIN}}-${{env.GODOT_TREEISH}}-${{github.ref}}-${{github.sha}}
            ${{env.BIN}}-${{env.GODOT_TREEISH}}-${{github.ref}}
            ${{env.BIN}}-${{env.GODOT_TREEISH}}

      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 platform=windows target=${{matrix.target}} arch=${{matrix.arch}} production=${{matrix.production}} module_mono_enabled=${{matrix.build-mono}} ${{env.SCONSFLAGS}}

      - name: Generate C# glue
        if: matrix.build-mono && matrix.target == 'editor'
        env:
          GODOT_VERSION_STATUS: limboai
        run: |
          ./bin/${{ env.BIN }} --headless --generate-mono-glue ./modules/mono/glue || true

      - name: Build .NET solutions
        if: matrix.build-mono && matrix.target == 'editor'
        env:
          GODOT_VERSION_STATUS: limboai
        run: |
          python ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=windows

      - name: Prepare artifact
        shell: bash
        env:
          OUTDIR: ${{ startsWith(matrix.target, 'template') && 'out/templates' || 'out/' }}
        run: |
          rm -f bin/*.{exp,lib,pdb}
          mkdir -p out/templates/
          mv bin/* ${{env.OUTDIR}}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        env:
          NAME_EDITOR: ${{env.NAME_PREFIX}}.${{matrix.target}}${{matrix.dev_build == true && '.dev' || ''}}.windows.${{matrix.arch}}${{matrix.build-mono == true && '.mono' || ''}}
          NAME_TEMPLATES: ${{env.NAME_PREFIX}}.export-templates${{  matrix.build-mono == true && '.mono' || ''  }}
        with:
          name: ${{ startsWith(matrix.target, 'template') && env.NAME_TEMPLATES || env.NAME_EDITOR  }}
          path: out/*
