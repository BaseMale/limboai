<?xml version="1.0" encoding="UTF-8" ?>
<class name="BTPlayer" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Player of [BehaviorTree] resources.
	</brief_description>
	<description>
		BTPlayer node is used for the instantiation and playback of [BehaviorTree] resources at runtime. During instantiation, the behavior tree instance is initialized with a reference to the agent and the [member blackboard]. Agent is the owner of the BTPlayer node (see [member Node.owner]).
		For an introduction to behavior trees, see [BehaviorTree].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_last_status" qualifiers="const">
			<return type="int" />
			<description>
				Returns the behavior tree's last execution status. See [enum BT.Status].
			</description>
		</method>
		<method name="restart">
			<return type="void" />
			<description>
				Resets the behavior tree's execution. Each running task will be aborted and the next tree execution will start anew. This method does not reset [Blackboard].
			</description>
		</method>
		<method name="update">
			<return type="void" />
			<param index="0" name="p_delta" type="float" />
			<description>
				Executes the root task of the behavior tree instance if [member active] is [code]true[/code]. Call this method when [member update_mode] is set to [constant MANUAL]. When [member update_mode] is not [constant MANUAL], the [method update] will be called automatically. See [enum UpdateMode].
			</description>
		</method>
	</methods>
	<members>
		<member name="active" type="bool" setter="set_active" getter="get_active" default="true">
			If [code]true[/code], the behavior tree will be executed during update.
		</member>
		<member name="behavior_tree" type="BehaviorTree" setter="set_behavior_tree" getter="get_behavior_tree">
			[BehaviorTree] resource to instantiate and execute at runtime.
		</member>
		<member name="blackboard" type="Blackboard" setter="set_blackboard" getter="get_blackboard">
			Holds data shared by the behavior tree tasks. See [Blackboard].
		</member>
		<member name="monitor_performance" type="bool" setter="_set_monitor_performance" getter="_get_monitor_performance" default="false">
			If [code]true[/code], adds a performance monitor to "Debugger-&gt;Monitors" for each instance of this [BTPlayer] node.
		</member>
		<member name="prefetch_nodepath_vars" type="bool" setter="set_prefetch_nodepath_vars" getter="get_prefetch_nodepath_vars" default="true">
			If [code]true[/code], any [NodePath] variables in the [Blackboard] are replaced with [Node] references when the tree is instantiated. References are retrieved by calling [method Node.get_node] on the agent instance (agent is the owner of the BTPlayer node).
		</member>
		<member name="update_mode" type="int" setter="set_update_mode" getter="get_update_mode" enum="BTPlayer.UpdateMode" default="1">
			Determines when the behavior tree is executed. See [enum UpdateMode].
		</member>
	</members>
	<signals>
		<signal name="behavior_tree_finished">
			<param index="0" name="p_status" type="int" />
			<description>
				Emitted when the behavior tree has finished executing and returned [code]SUCCESS[/code] or [code]FAILURE[/code].
				Argument [param p_status] holds the status returned by the behavior tree. See [enum BT.Status].
			</description>
		</signal>
		<signal name="updated">
			<param index="0" name="p_status" type="int" />
			<description>
				Emitted when BTPlayer has finished the behavior tree update.
				Argument [param p_status] holds the status returned by the behavior tree. See [enum BT.Status].
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="IDLE" value="0" enum="UpdateMode">
			Execute behavior tree during the idle process.
		</constant>
		<constant name="PHYSICS" value="1" enum="UpdateMode">
			Execute behavior tree during the physics process.
		</constant>
		<constant name="MANUAL" value="2" enum="UpdateMode">
			Behavior tree is executed manually by calling [method update].
		</constant>
	</constants>
</class>
